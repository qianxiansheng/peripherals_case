<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\peripherals_case.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\peripherals_case.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Thu May 18 14:24:06 2023
<BR><P>
<H3>Maximum Stack Usage =        180 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
i2c_test_irq_cb &rArr; peripherals_i2c_read_data_dma_setup &rArr; peripherals_i2c_rxfifo_to_dma &rArr; DMA_PreparePeripheral2Mem &rArr; DMA_GetPeripheralWidth &rArr; DMG_GetSPIDMAWidth
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a> from startup_ing91600.o(.text) referenced from startup_ing91600.o(RESET)
 <LI><a href="#[2]">__scatterload</a> from init.o(.text) referenced from startup_ing91600.o(.text)
 <LI><a href="#[3]">app_main</a> from main.o(.text.app_main) referenced from startup_ing91600.o(.text)
 <LI><a href="#[5]">cb_putc</a> from main.o(.text.cb_putc) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[7]">i2c_test_irq_cb</a> from main.o(.text.i2c_test_irq_cb) referenced 2 times from main.o(.text.i2c_test_init)
 <LI><a href="#[6]">i2cdma_test_timer_task</a> from main.o(.text.i2cdma_test_timer_task) referenced 2 times from main.o(.text.i2c_test)
 <LI><a href="#[1]">main</a> from startup_ing91600.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4]">setup_profile</a> from main.o(.text.setup_profile) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[9]">wdt_test_irq_cb</a> from main.o(.text.wdt_test_irq_cb) referenced 2 times from main.o(.text.wdt_test_init)
 <LI><a href="#[8]">wdt_test_timer_task</a> from main.o(.text.wdt_test_timer_task) referenced 2 times from main.o(.text.wdt_test)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1f]"></a>platform_32k_rc_auto_tune</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[30]"></a>platform_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_test_irq_cb
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_test_irq_cb
</UL>

<P><STRONG><a name="[20]"></a>platform_set_evt_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[2a]"></a>platform_set_irq_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_test_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_test_init
</UL>

<P><STRONG><a name="[39]"></a>xTaskGetTickCount</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_test
</UL>

<P><STRONG><a name="[26]"></a>xTimerCreate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_test
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_test
</UL>

<P><STRONG><a name="[3a]"></a>xTimerGenericCommand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_test
</UL>

<P><STRONG><a name="[a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[3e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[40]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[41]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[42]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[43]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>DMA_EnableChannel</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, peripheral_dma.o(.text.DMA_EnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_i2c_rxfifo_to_dma
</UL>

<P><STRONG><a name="[f]"></a>DMA_PreparePeripheral2Mem</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, peripheral_dma.o(.text.DMA_PreparePeripheral2Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DMA_PreparePeripheral2Mem &rArr; DMA_GetPeripheralWidth &rArr; DMG_GetSPIDMAWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetPeripheralWidth
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetPeripheralDataAddr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetDmaId
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_i2c_rxfifo_to_dma
</UL>

<P><STRONG><a name="[34]"></a>DMA_Reset</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, peripheral_dma.o(.text.DMA_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals_dma_module
</UL>

<P><STRONG><a name="[2e]"></a>I2C_ClearIntState</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peripheral_i2c.o(.text.I2C_ClearIntState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ClearIntState
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_test_irq_cb
</UL>

<P><STRONG><a name="[35]"></a>I2C_Config</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, peripheral_i2c.o(.text.I2C_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals_i2c_module
</UL>

<P><STRONG><a name="[2f]"></a>I2C_DmaEnable</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, peripheral_i2c.o(.text.I2C_DmaEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_DmaEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_i2c_read_data_dma_setup
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_test_irq_cb
</UL>

<P><STRONG><a name="[36]"></a>I2C_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, peripheral_i2c.o(.text.I2C_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals_i2c_module
</UL>

<P><STRONG><a name="[2b]"></a>I2C_GetIntState</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_i2c.o(.text.I2C_GetIntState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_GetIntState
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_test_irq_cb
</UL>

<P><STRONG><a name="[2c]"></a>I2C_GetTransactionDir</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_i2c.o(.text.I2C_GetTransactionDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_GetTransactionDir
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_test_irq_cb
</UL>

<P><STRONG><a name="[37]"></a>I2C_IntEnable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peripheral_i2c.o(.text.I2C_IntEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals_i2c_module
</UL>

<P><STRONG><a name="[15]"></a>PINCTRL_Pull</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, peripheral_pinctrl.o(.text.PINCTRL_Pull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PINCTRL_Pull
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelI2cIn
</UL>

<P><STRONG><a name="[12]"></a>PINCTRL_SelI2cIn</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, peripheral_pinctrl.o(.text.PINCTRL_SelI2cIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PINCTRL_SelI2cIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_Pull
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_test_init
</UL>

<P><STRONG><a name="[14]"></a>PINCTRL_SetPadMux</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, peripheral_pinctrl.o(.text.PINCTRL_SetPadMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;source_id_on_pin
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelI2cIn
</UL>

<P><STRONG><a name="[19]"></a>SYSCTRL_ClearClkGate</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>

<P><STRONG><a name="[1b]"></a>SYSCTRL_ClearClkGateMulti</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGateMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_test_init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_test_init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals_dma_module
</UL>

<P><STRONG><a name="[10]"></a>SYSCTRL_GetDmaId</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, peripheral_sysctrl.o(.text.SYSCTRL_GetDmaId))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SYSCTRL_GetDmaId
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PreparePeripheral2Mem
</UL>

<P><STRONG><a name="[3c]"></a>TMR_WatchDogClearInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, peripheral_timer.o(.text.TMR_WatchDogClearInt))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_test_irq_cb
</UL>

<P><STRONG><a name="[3b]"></a>TMR_WatchDogEnable3</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, peripheral_timer.o(.text.TMR_WatchDogEnable3))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TMR_WatchDogEnable3
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_test_init
</UL>

<P><STRONG><a name="[3d]"></a>TMR_WatchDogRestart</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, peripheral_timer.o(.text.TMR_WatchDogRestart))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_test_timer_task
</UL>

<P><STRONG><a name="[23]"></a>UART_SendData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peripheral_uart.o(.text.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[1e]"></a>apUART_BaudRateSet</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_BaudRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>

<P><STRONG><a name="[22]"></a>apUART_Check_TXFIFO_FULL</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Check_TXFIFO_FULL))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Check_TXFIFO_FULL
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[1d]"></a>apUART_Initialize</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
</UL>

<P><STRONG><a name="[3]"></a>app_main</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = app_main &rArr; setup_peripherals &rArr; i2c_test_init &rArr; PINCTRL_SelI2cIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_evt_callback
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_32k_rc_auto_tune
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>cb_putc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text.cb_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[24]"></a>config_uart</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, main.o(.text.config_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[25]"></a>i2c_test</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(.text.i2c_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_test
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[27]"></a>i2c_test_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text.i2c_test_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = i2c_test_init &rArr; PINCTRL_SelI2cIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelI2cIn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals_i2c_module
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals_dma_module
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[7]"></a>i2c_test_irq_cb</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, main.o(.text.i2c_test_irq_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = i2c_test_irq_cb &rArr; peripherals_i2c_read_data_dma_setup &rArr; peripherals_i2c_rxfifo_to_dma &rArr; DMA_PreparePeripheral2Mem &rArr; DMA_GetPeripheralWidth &rArr; DMG_GetSPIDMAWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_i2c_read_data_dma_setup
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetTransactionDir
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetIntState
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DmaEnable
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearIntState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_test_init)
</UL>
<P><STRONG><a name="[6]"></a>i2cdma_test_timer_task</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, main.o(.text.i2cdma_test_timer_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2cdma_test_timer_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.i2c_test)
</UL>
<P><STRONG><a name="[2d]"></a>peripherals_i2c_read_data_dma_setup</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text.peripherals_i2c_read_data_dma_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = peripherals_i2c_read_data_dma_setup &rArr; peripherals_i2c_rxfifo_to_dma &rArr; DMA_PreparePeripheral2Mem &rArr; DMA_GetPeripheralWidth &rArr; DMG_GetSPIDMAWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_i2c_rxfifo_to_dma
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DmaEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_test_irq_cb
</UL>

<P><STRONG><a name="[31]"></a>peripherals_i2c_rxfifo_to_dma</STRONG> (Thumb, 46 bytes, Stack size 64 bytes, main.o(.text.peripherals_i2c_rxfifo_to_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = peripherals_i2c_rxfifo_to_dma &rArr; DMA_PreparePeripheral2Mem &rArr; DMA_GetPeripheralWidth &rArr; DMG_GetSPIDMAWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PreparePeripheral2Mem
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_i2c_read_data_dma_setup
</UL>

<P><STRONG><a name="[21]"></a>setup_peripherals</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text.setup_peripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = setup_peripherals &rArr; i2c_test_init &rArr; PINCTRL_SelI2cIn &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_test_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_test_init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[4]"></a>setup_profile</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text.setup_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setup_profile &rArr; wdt_test
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_test
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[38]"></a>wdt_test</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, main.o(.text.wdt_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wdt_test
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[33]"></a>wdt_test_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text.wdt_test_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = wdt_test_init &rArr; SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_WatchDogEnable3
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[9]"></a>wdt_test_irq_cb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.wdt_test_irq_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wdt_test_irq_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_WatchDogClearInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.wdt_test_init)
</UL>
<P><STRONG><a name="[8]"></a>wdt_test_timer_task</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, main.o(.text.wdt_test_timer_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wdt_test_timer_task
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_WatchDogRestart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.wdt_test)
</UL>
<P><STRONG><a name="[45]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[46]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[47]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[29]"></a>setup_peripherals_dma_module</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.setup_peripherals_dma_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = setup_peripherals_dma_module &rArr; SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_test_init
</UL>

<P><STRONG><a name="[28]"></a>setup_peripherals_i2c_module</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(.text.setup_peripherals_i2c_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setup_peripherals_i2c_module &rArr; I2C_IntEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntEnable
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_test_init
</UL>

<P><STRONG><a name="[13]"></a>PINCTRL_SelInput</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, peripheral_pinctrl.o(.text.PINCTRL_SelInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_id_for_input_source
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelI2cIn
</UL>

<P><STRONG><a name="[17]"></a>pin_id_for_input_source</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, peripheral_pinctrl.o(.text.pin_id_for_input_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pin_id_for_input_source
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
</UL>

<P><STRONG><a name="[16]"></a>set_reg_bits</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, peripheral_pinctrl.o(.text.set_reg_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
</UL>

<P><STRONG><a name="[18]"></a>source_id_on_pin</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, peripheral_pinctrl.o(.text.source_id_on_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = source_id_on_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
</UL>

<P><STRONG><a name="[1a]"></a>SYSCTRL_ClkGateCtrl</STRONG> (Thumb, 902 bytes, Stack size 32 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClkGateCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>

<P><STRONG><a name="[1c]"></a>set_reg_bit</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, peripheral_sysctrl.o(.text.set_reg_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>

<P><STRONG><a name="[11]"></a>DMA_GetPeripheralDataAddr</STRONG> (Thumb, 292 bytes, Stack size 12 bytes, peripheral_dma.o(.text.DMA_GetPeripheralDataAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_GetPeripheralDataAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PreparePeripheral2Mem
</UL>

<P><STRONG><a name="[d]"></a>DMA_GetPeripheralWidth</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, peripheral_dma.o(.text.DMA_GetPeripheralWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_GetPeripheralWidth &rArr; DMG_GetSPIDMAWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMG_GetSPIDMAWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PreparePeripheral2Mem
</UL>

<P><STRONG><a name="[e]"></a>DMG_GetSPIDMAWidth</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, peripheral_dma.o(.text.DMG_GetSPIDMAWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMG_GetSPIDMAWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetPeripheralWidth
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
